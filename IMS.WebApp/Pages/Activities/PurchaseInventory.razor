@page "/purchase"

@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase

<h3>Purchase Inventory</h3>
<br />
<EditForm Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
 <br/>
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Inventory"
                                    SearchFunction="SearchInventory"
                                    OnItemSelected="OnItemSelected">

                </AutoCompleteComponent>
                <input type="hidden" @bind-value="purchaseViewModel.InventoryId" />
                @if (purchaseViewModel.InventoryId > 0 && purchaseViewModel.InventoryPrice >= 0)
                {
                    <text>Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("c");
                }

            </div>
        </div>
    </div>
 <br/>
     <div class="form-group">
        <label for="qty">Quantity #</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Purchase</button>

</EditForm>

@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

    private Inventory selectedInventory = null;

    private async Task Purchase()
    { 
        await PurchaseInventoryUseCase.ExecuteAsync(
            this.purchaseViewModel.PONumber,
            this.selectedInventory,
            this.purchaseViewModel.QuantityToPurchase,
            "Poowadon"
        );

        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }

    private List<ItemViewModel>? SearchInventory(string name)
    {
        var list = ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();
        if (list is null) return null;

        return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.Id);

        purchaseViewModel.InventoryId = item.Id;
        purchaseViewModel.InventoryPrice = selectedInventory.Price;
    }
}